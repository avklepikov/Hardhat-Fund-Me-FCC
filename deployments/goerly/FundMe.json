{
  "address": "0xcF02B2EF8b70aa48BB745ca33F4b23F064519AfE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4bd188abf79220842e1b8925c1754ca2e8ebbf89612d7bad7de5597a560c0e19",
  "receipt": {
    "to": null,
    "from": "0x20B05d1D8E555909f984c23714b3CcE4bDa01137",
    "contractAddress": "0xcF02B2EF8b70aa48BB745ca33F4b23F064519AfE",
    "transactionIndex": 35,
    "gasUsed": "888636",
    "logsBloom": "0x
    "blockHash": "0x4eb8fc9b9969487bda9114b3899c1c6e3a370448acd3199070a090a859d853e5",
    "transactionHash": "0x4bd188abf79220842e1b8925c1754ca2e8ebbf89612d7bad7de5597a560c0e19",
    "logs": [],
    "blockNumber": 7776094,
    "cumulativeGasUsed": "6578758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "19c876eb49451cc8bcc92343a1711888",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    address public immutable i_owner; // Address of the contracct owner\\n    // IMMUTABLE is optional but is used for gas optimization. i_owner convention\\n    uint256 public constant MINIMUM_USD = 5 * 10**18; // Min funding amount OR  (5 * 1e18)\\n    // changes USD50 to 5 to spend less from my balance\\n\\n    address[] public funders; // Address list of those who provided funds\\n    mapping(address => uint256) public addressToAmountFunded; // Will be populated Later as a 2 dim array\\n\\n    AggregatorV3Interface private priceFeed; // Interface to external service of a cchain link\\n\\n    constructor(address priceFeedAddress) {\\n        // Loaded just once during deployment\\n        i_owner = msg.sender; // During deployment sender address is assigned to i_owner\\n        priceFeed = AggregatorV3Interface(priceFeedAddress); // Setting up price feed. priceFeedAddreee - what is this?\\n    }\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender==owner, \\\"Sender is not owner\\\");\\n        // but for gas efficiency we can implement error handling instead (see next line)\\n        // this is because string needs a lot of gas\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _; // means do the rest of the code.\\n        // If instruction is after this line then it will be executed after the main code\\n    }\\n\\n    // Checked\\n    function fund() public payable {\\n        // Want to be able to set minimum amount in USD\\n        // How do we send ETH to the contract?\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        ); // 1e18 = 1 * 10 ** 18 = 1 ETH\\n        //what is reverting?\\n        //undo any action before and send remaining gas back\\n\\n        addressToAmountFunded[msg.sender] += msg.value; // Update mapping\\n        funders.push(msg.sender); // Append to list of Funders\\n    }\\n\\n    // Checked\\n    function getVersion() public view returns (uint256) {\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // ); // ETH/USD price feed address of Goerli Network.\\n        return priceFeed.version();\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // onlyOwner decoration means that we need to apply modifier onlyOwner\\n        for (\\n            uint256 funderIndex = 0; // From the first funder index (in the list)\\n            funderIndex < funders.length; // Until end of list is reached\\n            funderIndex++ // Step by 1\\n        ) {\\n            address funder = funders[funderIndex]; // Get funder address\\n            addressToAmountFunded[funder] = 0; // Reset amount for this address\\n        }\\n        funders = new address[](0); // reset the list  of funders\\n\\n        // to actually withdraw the funds\\n        // 3 ways to send: transfer; send; call. We will use call but the rest can be used (uncommented)\\n\\n        //msg.sender - address\\n        //payable(msg.sender) - payable address\\n        //check it: solidity-by-example.org/sending-ether\\n\\n        //transfer:\\n        //payable(msg.sender).transfer(address(this).balance);\\n\\n        //send:\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //require(sendSuccess, \\\"Send failed\\\")\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // we will use call\\n        (bool callSuccess, ) = payable(msg.sender).call{ // get results of payable function\\n            value: address(this).balance\\n        }(\\\"\\\"); // call is a low-level interface for sending a message to a contract.\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    //if someone just send funds we want fund() to process this txn:\\n    //min USD amount will be applied as it is a part of fund()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xe3e4b9929670f91b9f3947cdc016fb9785847bd360ef83934a91d911177d7ccb\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x1cf8d04cecaa60b53645703411f813508ca433f01e9af13c8b734a676dc56df7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516200101a3803806200101a833981810160405281019061003491906100c7565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b6000815190506100c18161012b565b92915050565b6000602082840312156100dd576100dc610126565b5b60006100eb848285016100b2565b91505092915050565b60006100ff82610106565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610134816100f4565b811461013f57600080fd5b50565b60805160601c610eb2620001686000396000818161038c01526105f00152610eb26000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b6040516100af9190610a36565b60405180910390f35b3480156100c457600080fd5b506100cd61038a565b005b3480156100db57600080fd5b506100f660048036038101906100f1919061083d565b6105ca565b6040516101039190610a36565b60405180910390f35b34801561011857600080fd5b506101216105e2565b60405161012e9190610a36565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b506101566105ee565b60405161016391906109db565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e919061086a565b610612565b6040516101a091906109db565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065190919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610a16565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a6d565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190610897565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104ba57600080828154811061043457610433610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b290610cc1565b915050610412565b50600067ffffffffffffffff8111156104d6576104d5610d97565b5b6040519080825280602002602001820160405280156105045781602001602082028036833780820191505090505b506000908051906020019061051a92919061072d565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610541906109c6565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906109f6565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061062257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065d8361068d565b90506000670de0b6b3a764000085836106769190610c0b565b6106809190610ac3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d657600080fd5b505afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e91906108c4565b5050509150506402540be400816107259190610af4565b915050919050565b8280548282559060005260206000209081019282156107a6579160200282015b828111156107a55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074d565b5b5090506107b391906107b7565b5090565b5b808211156107d05760008160009055506001016107b8565b5090565b6000813590506107e381610e20565b92915050565b6000815190506107f881610e37565b92915050565b60008135905061080d81610e4e565b92915050565b60008151905061082281610e4e565b92915050565b60008151905061083781610e65565b92915050565b60006020828403121561085357610852610dc6565b5b6000610861848285016107d4565b91505092915050565b6000602082840312156108805761087f610dc6565b5b600061088e848285016107fe565b91505092915050565b6000602082840312156108ad576108ac610dc6565b5b60006108bb84828501610813565b91505092915050565b600080600080600060a086880312156108e0576108df610dc6565b5b60006108ee88828901610828565b95505060206108ff888289016107e9565b945050604061091088828901610813565b935050606061092188828901610813565b925050608061093288828901610828565b9150509295509295909350565b61094881610c65565b82525050565b600061095b600b83610a5c565b915061096682610dcb565b602082019050919050565b600061097e601283610a5c565b915061098982610df4565b602082019050919050565b60006109a1600083610a51565b91506109ac82610e1d565b600082019050919050565b6109c081610ca1565b82525050565b60006109d182610994565b9150819050919050565b60006020820190506109f0600083018461093f565b92915050565b60006020820190508181036000830152610a0f8161094e565b9050919050565b60006020820190508181036000830152610a2f81610971565b9050919050565b6000602082019050610a4b60008301846109b7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610a7882610ca1565b9150610a8383610ca1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ab857610ab7610d0a565b5b828201905092915050565b6000610ace82610ca1565b9150610ad983610ca1565b925082610ae957610ae8610d39565b5b828204905092915050565b6000610aff82610c77565b9150610b0a83610c77565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610b4957610b48610d0a565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b8657610b85610d0a565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610bc357610bc2610d0a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c0057610bff610d0a565b5b828202905092915050565b6000610c1682610ca1565b9150610c2183610ca1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c5a57610c59610d0a565b5b828202905092915050565b6000610c7082610c81565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610ccc82610ca1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cff57610cfe610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b50565b610e2981610c65565b8114610e3457600080fd5b50565b610e4081610c77565b8114610e4b57600080fd5b50565b610e5781610ca1565b8114610e6257600080fd5b50565b610e6e81610cab565b8114610e7957600080fd5b5056fea264697066735822122064e542d5823c4f6ee6d9a2e24eec0e8e187616d23809c59c433f949377d2d3c464736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80630d8e6e2c1461008d5780633ccfd60b146100b85780633e47d6f3146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b6040516100af9190610a36565b60405180910390f35b3480156100c457600080fd5b506100cd61038a565b005b3480156100db57600080fd5b506100f660048036038101906100f1919061083d565b6105ca565b6040516101039190610a36565b60405180910390f35b34801561011857600080fd5b506101216105e2565b60405161012e9190610a36565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b506101566105ee565b60405161016391906109db565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e919061086a565b610612565b6040516101a091906109db565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065190919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610a16565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a6d565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190610897565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104ba57600080828154811061043457610433610d68565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b290610cc1565b915050610412565b50600067ffffffffffffffff8111156104d6576104d5610d97565b5b6040519080825280602002602001820160405280156105045781602001602082028036833780820191505090505b506000908051906020019061051a92919061072d565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610541906109c6565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906109f6565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061062257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065d8361068d565b90506000670de0b6b3a764000085836106769190610c0b565b6106809190610ac3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d657600080fd5b505afa1580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e91906108c4565b5050509150506402540be400816107259190610af4565b915050919050565b8280548282559060005260206000209081019282156107a6579160200282015b828111156107a55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074d565b5b5090506107b391906107b7565b5090565b5b808211156107d05760008160009055506001016107b8565b5090565b6000813590506107e381610e20565b92915050565b6000815190506107f881610e37565b92915050565b60008135905061080d81610e4e565b92915050565b60008151905061082281610e4e565b92915050565b60008151905061083781610e65565b92915050565b60006020828403121561085357610852610dc6565b5b6000610861848285016107d4565b91505092915050565b6000602082840312156108805761087f610dc6565b5b600061088e848285016107fe565b91505092915050565b6000602082840312156108ad576108ac610dc6565b5b60006108bb84828501610813565b91505092915050565b600080600080600060a086880312156108e0576108df610dc6565b5b60006108ee88828901610828565b95505060206108ff888289016107e9565b945050604061091088828901610813565b935050606061092188828901610813565b925050608061093288828901610828565b9150509295509295909350565b61094881610c65565b82525050565b600061095b600b83610a5c565b915061096682610dcb565b602082019050919050565b600061097e601283610a5c565b915061098982610df4565b602082019050919050565b60006109a1600083610a51565b91506109ac82610e1d565b600082019050919050565b6109c081610ca1565b82525050565b60006109d182610994565b9150819050919050565b60006020820190506109f0600083018461093f565b92915050565b60006020820190508181036000830152610a0f8161094e565b9050919050565b60006020820190508181036000830152610a2f81610971565b9050919050565b6000602082019050610a4b60008301846109b7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610a7882610ca1565b9150610a8383610ca1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ab857610ab7610d0a565b5b828201905092915050565b6000610ace82610ca1565b9150610ad983610ca1565b925082610ae957610ae8610d39565b5b828204905092915050565b6000610aff82610c77565b9150610b0a83610c77565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610b4957610b48610d0a565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b8657610b85610d0a565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610bc357610bc2610d0a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610c0057610bff610d0a565b5b828202905092915050565b6000610c1682610ca1565b9150610c2183610ca1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c5a57610c59610d0a565b5b828202905092915050565b6000610c7082610c81565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610ccc82610ca1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cff57610cfe610d0a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b50565b610e2981610c65565b8114610e3457600080fd5b50565b610e4081610c77565b8114610e4b57600080fd5b50565b610e5781610ca1565b8114610e6257600080fd5b50565b610e6e81610cab565b8114610e7957600080fd5b5056fea264697066735822122064e542d5823c4f6ee6d9a2e24eec0e8e187616d23809c59c433f949377d2d3c464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}